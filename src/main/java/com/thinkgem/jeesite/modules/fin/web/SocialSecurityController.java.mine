/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.fin.web;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;
import com.thinkgem.jeesite.modules.fin.utils.SocialSecurityUtil;
import com.thinkgem.jeesite.modules.fin.utils.SocialSecurityUtil;
import com.thinkgem.jeesite.modules.per.service.EmployeeService;
import com.thinkgem.jeesite.modules.per.service.EmployeeTypeService;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.fin.entity.SocialSecurity;
import com.thinkgem.jeesite.modules.fin.service.SocialSecurityService;

import java.util.ArrayList;
import java.util.List;

/**
 * social_securityController
 *
 * @author czy
 * @version 2016-10-13
 */
@Controller
@RequestMapping(value = "${adminPath}/fin/socialSecurity")
public class SocialSecurityController extends BaseController {

    @Autowired
    private EmployeeService employeeService;
    @Autowired
    private SocialSecurityService socialSecurityService;

    @ModelAttribute
    public SocialSecurity get(@RequestParam(required = false) String id) {
        SocialSecurity entity = null;
        if (StringUtils.isNotBlank(id)) {
            entity = socialSecurityService.get(id);
        }
        if (entity == null) {
            entity = new SocialSecurity();
        }
        return entity;
    }

    @RequiresPermissions("fin:socialSecurity:view")
    @RequestMapping(value = {"list", ""})
    public String list(SocialSecurity socialSecurity, HttpServletRequest request, HttpServletResponse response, Model model) {
        Page<SocialSecurity> page = socialSecurityService.findPage(new Page<SocialSecurity>(request, response), socialSecurity);
        model.addAttribute("page", page);
        return "modules/fin/socialSecurityList";
    }

    @RequiresPermissions("fin:socialSecurity:view")
    @RequestMapping(value = "form")
    public String form(SocialSecurity socialSecurity, Model model) {
        model.addAttribute("socialSecurity", socialSecurity);
        return "modules/fin/socialSecurityForm";
    }

    @RequiresPermissions("fin:socialSecurity:edit")
    @RequestMapping(value = "save")
    public String save(SocialSecurity socialSecurity, Model model, RedirectAttributes redirectAttributes) {
        if (!beanValidator(model, socialSecurity)) {
            return form(socialSecurity, model);
        }
        socialSecurityService.save(socialSecurity);
        addMessage(redirectAttributes, "保存social_security成功");
        return "redirect:" + Global.getAdminPath() + "/fin/socialSecurity/?repage";
    }

    @RequiresPermissions("fin:socialSecurity:edit")
    @RequestMapping(value = "delete")
    public String delete(SocialSecurity socialSecurity, RedirectAttributes redirectAttributes) {
        socialSecurityService.delete(socialSecurity);
        addMessage(redirectAttributes, "删除social_security成功");
        return "redirect:" + Global.getAdminPath() + "/fin/socialSecurity/?repage";
    }

    @ResponseBody
    @RequiresPermissions("fin:socialSecurity:edit")
    @RequestMapping(value = "checkRule")
    public boolean checkRule(SocialSecurity socialSecurity) throws  Exception{
        if (employeeService.get(String.valueOf(socialSecurity.getEmployeeId())) == null) {
             throw new Exception("该employeeId不存在");
        } else return true;
    }


    @RequiresPermissions("fin:socialSecurity:edit")
    @RequestMapping(value = "import", method = RequestMethod.POST)
    public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
        int successNum = 0;                                                                 //记录成功记录条数
        int failureNum = 0;                                                                 //记录失败记录条数
        StringBuilder failureMsg = new StringBuilder();                                     //记录失败信息
        if (Global.isDemoMode()) {                                                          //判断是否为演示模式
            addMessage(redirectAttributes, "演示模式，不允许操作！");                       //演示模式不允许操作
            return "redirect:" + Global.getAdminPath() + "/fin/socialSecurity/?repage";
        }
        try {
            ImportExcel ei = new ImportExcel(file, 1, 0);                                  //解析excel文件
            List<SocialSecurity> list = SocialSecurityUtil.getDataList(ei,failureMsg);//获取一个excel数据对象数组
            for (SocialSecurity socialSecurity : list) {                                   //遍历list数组内的socialSecurity对象
                try {
                    if (checkRule(socialSecurity)) {                                        //判断employerId是否符合要求
                        socialSecurityService.save(socialSecurity);                         //存储socialSecurity到数据库
                        successNum++;                                                       //成功条数+1
                    }
                }
                catch(ConstraintViolationException ex){
                    failureMsg.append("----------------------------------导入失败：");
                    List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
                    for (String message : messageList){
                        failureMsg.append(message+"; ");
                        failureNum++;
                    }
                }
                catch (Exception e) {
                    failureNum++;                                                           //若抛出异常则失败条数+1
                    failureMsg.append("导入用户失败！失败信息：第" + (failureNum + successNum) + "条数据(" + "员工编号id:" + socialSecurity.getEmployeeId() + "，缴费时间:" + socialSecurity.getPayDate() + "，公司缴费金额:" + socialSecurity.getCompanyPay() + "，个人缴费金额:" + socialSecurity.getPersonalPay() + ")员工id有误<br/>");//在失败信息中加入失败信息
                }
            }
            if (failureNum>0){
                failureMsg.insert(0, "，失败 "+failureNum+" 条用户，导入信息如下<br/>");
            }
            addMessage(redirectAttributes, "已成功导入 "+successNum+" 条用户"+failureMsg);
        } catch (Exception e) {
            addMessage(redirectAttributes, e.getMessage());
        }

        return "redirect:" + Global.getAdminPath() + "/fin/socialSecurity/?repage";
    }



}