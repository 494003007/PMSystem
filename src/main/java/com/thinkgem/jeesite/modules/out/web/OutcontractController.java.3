/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.out.web;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.map.HashedMap;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.out.entity.Outcontract;
import com.thinkgem.jeesite.modules.out.entity.OutcontractPay;
import com.thinkgem.jeesite.modules.out.entity.Outsourcer;
import com.thinkgem.jeesite.modules.out.service.OutcontractPayService;
import com.thinkgem.jeesite.modules.out.service.OutcontractService;
import com.thinkgem.jeesite.modules.out.service.OutsourcerService;
import com.thinkgem.jeesite.modules.pro.entity.Contract;
import com.thinkgem.jeesite.modules.pro.entity.Project;
import com.thinkgem.jeesite.modules.pro.service.ContractService;
import com.thinkgem.jeesite.modules.pro.service.ProjectService;

/**
 * 外包登记Controller
 * @author LKY
 * @version 2016-11-22
 */
@Controller
@RequestMapping(value = "${adminPath}/out/outcontract")
public class OutcontractController extends BaseController {

	@Autowired
	private OutcontractService outcontractService;
	@Autowired
	private ProjectService projectService;
	@Autowired
	private OutcontractPayService outcontractPayService;
	
	@Autowired
	private OutsourcerService outsourcerService;

	@Autowired
	private ContractService contractService;
	
	
	@ModelAttribute
	public Outcontract get(@RequestParam(required=false) String id) {
		Outcontract entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = outcontractService.get(id);
		}
		if (entity == null){
			entity = new Outcontract();
		}
		return entity;
	}
	
	@RequiresPermissions("out:outcontract:view")
	@RequestMapping(value = {"list", ""})
	public String list(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Outcontract> list = outcontractService.findList1(); 
		for(int i=0;i<list.size();i++){
			if(list.get(i).getProjectId()!=null&&list.get(i).getProjectId()!=0){
	
				list.get(i).setProjectName(projectService.get(list.get(i).getProjectId()+"").getName());
			}
		
			if(list.get(i).getOutcontractTypeId()!=null&&list.get(i).getOutcontractTypeId()!=0){
				if(list.get(i).getOutcontractTypeId()==1){
					list.get(i).setOutcontractTypeName("服务合同");
				}else if(list.get(i).getOutcontractTypeId()==2){
					list.get(i).setOutcontractTypeName("采购合同");				
				}else{
				list.get(i).setOutcontractTypeName("分包合同");
				}
			}
		
			if(list.get(i).getOutsourcerId()!=null&&list.get(i).getOutsourcerId()!=0){
				
				list.get(i).setOutsourcerName(outsourcerService.get(list.get(i).getOutsourcerId()+"").getName());
			}
	
		}
		model.addAttribute("list", list);
		Outsourcer outsourcer=new Outsourcer();
		model.addAttribute("outsourcersList", outsourcerService.findList(outsourcer));
		return "modules/out/outcontractList";
	}

	
	@RequestMapping(value = {"addwithproject"})
	public String addwithproject(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
//		List<Outcontract> list = outcontractService.findList(outcontract); 
//		model.addAttribute("list", list);
		Outsourcer outsourcer=new Outsourcer();
		model.addAttribute("outsourcersList", outsourcerService.findList(outsourcer));
		model.addAttribute("projectList", projectService.findList(new Project()));
		return "modules/out/addwithproject";
	}
	@RequestMapping(value = {"addwithoutproject"})
	public String addwithoutproject(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
//		List<Outcontract> list = outcontractService.findList(outcontract); 
//		model.addAttribute("list", list);
		Outsourcer outsourcer=new Outsourcer();
		model.addAttribute("outsourcersList", outsourcerService.findList(outsourcer));
	
		return "modules/out/addwithoutproject";
	}

	@RequestMapping(value = {"look"})
	public void look(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
//		List<Outcontract> list = outcontractService.findList(outcontract); 
//		model.addAttribute("list", list);
//		Outsourcer outsourcer=new Outsourcer();
//		model.addAttribute("outsourcersList", outsourcerService.findList(outsourcer));
	System.out.println(outcontract);
	}
	
	
	@RequestMapping(value = {"searchcontract"})
	 public @ResponseBody Map<String,Object> login(HttpServletRequest request,HttpServletResponse response) throws IOException{  
	      System.out.println("进入了这个方法");  
		System.out.println(request.getParameter("name"));  
		String id=request.getParameter("name");
		 Contract contract  =new Contract();
		 contract.setProjectId(Integer.parseInt(id));
        List list= contractService.findList(contract);		
		System.out.println("表单数量为"+list.size());
		
        Map<String,Object> map = new HashMap<String,Object>();  
          map.put("contractlist", list);
        if(request.getParameter("name").equals("123")){  
            System.out.println("城东");  
            map.put("msg", "成功");  
        }else{  
            System.out.println("失败");  
            map.put("msg", "失败");  
        }  
        return map;  
    }  
	
	//返回合同的信息
	@RequestMapping(value = {"findcontract"})
	 public @ResponseBody Map<String,Object> findcontract(HttpServletRequest request,HttpServletResponse response) throws IOException{  
	      System.out.println("进入了这个方法");  
		System.out.println(request.getParameter("name"));  
		String id=request.getParameter("name");
	
		Contract contract=contractService.get(id);
		System.out.println("ht :"+contract);
       Map<String,Object> map = new HashMap<String,Object>();  
         map.put("contract", contract);
       if(request.getParameter("name").equals("123")){  
           System.out.println("城东");  
           map.put("msg", "成功");  
       }else{  
           System.out.println("失败");  
           map.put("msg", "失败");  
       }  
       return map;  
   }  
	

	
	
	
	@RequiresPermissions("out:outcontract:view")
	@RequestMapping(value = "form")
	public String form(Outcontract outcontract, Model model) {
		if (outcontract.getParent()!=null && StringUtils.isNotBlank(outcontract.getParent().getId())){
			outcontract.setParent(outcontractService.get(outcontract.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(outcontract.getId())){
				Outcontract outcontractChild = new Outcontract();
				outcontractChild.setParent(new Outcontract(outcontract.getParent().getId()));
				List<Outcontract> list = outcontractService.findList(outcontract); 
				if (list.size() > 0){
					outcontract.setSort(list.get(list.size()-1).getSort());
					if (outcontract.getSort() != null){
						outcontract.setSort(outcontract.getSort() + 30);
					}
				}
			}
		}
		if (outcontract.getSort() == null){
			outcontract.setSort(30);
		}
		model.addAttribute("outcontract", outcontract);
		return "modules/out/outcontractForm";
	}

	@RequiresPermissions("out:outcontract:edit")
	@RequestMapping(value = "save")
	public String save(Outcontract outcontract, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, outcontract)){
			return form(outcontract, model);
		}
		outcontractService.save(outcontract);
         
		addMessage(redirectAttributes, "保存外包管理信息成功");
		return "redirect:"+Global.getAdminPath()+"/out/outcontract/?repage";
	}
	
	@RequestMapping(value = "saveorder")
	public String saveorder(Outcontract outcontract, Model model, RedirectAttributes redirectAttributes) {

		outcontractService.save(outcontract);
      
     	Outcontract outcontract1=new Outcontract();
    	outcontract1.setParent(outcontract.getParent());
    	List list=outcontractService.findList(outcontract1);
    	System.out.println("长度为"+list.size());
    	model.addAttribute("list",list );
    	
    	model.addAttribute("father", outcontract);
    	
    	return "modules/out/add1";
	
	}
	
	
	
	@RequiresPermissions("out:outcontract:edit")
	@RequestMapping(value = "delete")
	public String delete(Outcontract outcontract, RedirectAttributes redirectAttributes) {
		outcontractService.delete(outcontract);
		addMessage(redirectAttributes, "删除外包管理信息成功");
		return "redirect:"+Global.getAdminPath()+"/out/outcontract/?repage";
	}
	
	@RequestMapping(value = "intomessage")
	public String intomessage(Outcontract outcontract,Model model,HttpServletRequest request) {
	   String contract=request.getParameter("contract");
	   model.addAttribute("fathercontract", contract);
	   model.addAttribute("fatheroutcontract", outcontract);
	   Outsourcer outsourcer=new Outsourcer();
		model.addAttribute("outsourcersList", outsourcerService.findList(outsourcer));
		return "modules/out/form1";
	}
	
//跳转到增加订单页面
	@RequestMapping(value = "addorder")
	public String addorder(Outcontract outcontract,Model model,HttpServletRequest request) {
		if (outcontract.getParent()!=null && StringUtils.isNotBlank(outcontract.getParent().getId())){
			outcontract.setParent(outcontractService.get(outcontract.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(outcontract.getId())){
				Outcontract outcontractChild = new Outcontract();
				outcontractChild.setParent(new Outcontract(outcontract.getParent().getId()));
				List<Outcontract> list = outcontractService.findList(outcontract); 
				if (list.size() > 0){
					outcontract.setSort(list.get(list.size()-1).getSort());
					if (outcontract.getSort() != null){
						outcontract.setSort(outcontract.getSort() + 30);
					}
				}
			}
		}
		if (outcontract.getSort() == null){
			outcontract.setSort(30);
		}
		model.addAttribute("outcontract", outcontract);
		return "modules/out/addorder";
	}
//	增加补充合同
	@RequestMapping(value = "addcontract")
	public String addcontract(Outcontract outcontract,Model model,HttpServletRequest request) {
		if (outcontract.getParent()!=null && StringUtils.isNotBlank(outcontract.getParent().getId())){
			outcontract.setParent(outcontractService.get(outcontract.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(outcontract.getId())){
				Outcontract outcontractChild = new Outcontract();
				outcontractChild.setParent(new Outcontract(outcontract.getParent().getId()));
				List<Outcontract> list = outcontractService.findList(outcontract); 
				if (list.size() > 0){
					outcontract.setSort(list.get(list.size()-1).getSort());
					if (outcontract.getSort() != null){
						outcontract.setSort(outcontract.getSort() + 30);
					}
				}
			}
		}
		if (outcontract.getSort() == null){
			outcontract.setSort(30);
		}
		model.addAttribute("outcontract", outcontract);
		return "modules/out/addcontract";
	}
	
	
	
	@RequestMapping(value = "add")
	public String add(Outcontract outcontract,Model model,HttpServletRequest request) {
		System.out.println("进入了add方法");
		
    model.addAttribute("outcontract", outcontract);
    if("1".equals(outcontract.getSettlementWay())){
    	Outcontract outcontract1=new Outcontract();
    	outcontract1.setParent(outcontract);
    	List list=outcontractService.findList(outcontract1);
    	System.out.println("长度为"+list.size());
    	model.addAttribute("list",list );
    	
    	model.addAttribute("father", outcontract);
    	
    	return "modules/out/add1";
    }else if("2".equals(outcontract.getSettlementWay())){
    	Outcontract outcontract1=new Outcontract();
    	outcontract1.setParent(outcontract);
    	List list=outcontractService.findList(outcontract1);
    	System.out.println("长度为"+list.size());
    	model.addAttribute("list",list );
    	
    	model.addAttribute("father", outcontract);
    	return "modules/out/add2";
    }else
    {
    	Outcontract outcontract1=new Outcontract();
    	outcontract1.setParent(outcontract);
    	List list=outcontractService.findList(outcontract1);
    	System.out.println("长度为"+list.size());
    	model.addAttribute("list",list );
    	
    	model.addAttribute("father", outcontract);
    Contract 	contract=new Contract();
    contract .setProjectId(outcontract.getProjectId());
    model.addAttribute("orderlist", contractService.findList(contract));
    
    model.addAttribute("outcontractPay", new OutcontractPay());
		return "modules/out/add3";

    }
	}
	//跳转到具体的增加付款页面
	@RequestMapping(value = "addpayway")
	public String addpayway(Outcontract outcontract,Model model,HttpServletResponse response,HttpServletRequest request) {
		System.out.println("进入了addpayway方法");
	    model.addAttribute("outcontract", outcontract);
	    if("1".equals(outcontract.getSettlementWay())){
//	    	按订单结算
	    
	    	OutcontractPay outcontractPay=new OutcontractPay();
	    	outcontractPay.setOutcontractId( Integer.parseInt(outcontract.getId()));
	    	Page<OutcontractPay> page = outcontractPayService.findPage(new Page<OutcontractPay>(request, response), outcontractPay); 
			for(int i=0;i<page.getList().size();i++){
				page.getList().get(i).setOrderName(outcontractService.get(""+page.getList().get(i).getOrderId()).getName());
				
			}
	    	List firstlist=page.getList();
	    	model.addAttribute("list120", firstlist);
	    	
	    	
	    	
	    	
	    	
	    	Outcontract outcontract1=new Outcontract();
	    	outcontract1.setParent(outcontract);
	    	List list=outcontractService.findList(outcontract1);
	    	System.out.println("长度为"+list.size());
	    	model.addAttribute("list",list );
	    	model.addAttribute("outcontractPay", new OutcontractPay());
	    	return "modules/out/payway1";
	    }else if("2".equals(outcontract.getSettlementWay())){
//	    	按合同结算
	    	
	    	return "modules/out/payway2";
	    }else
	    {
//			框架合同
			return "modules/out/payway3";

	    }
	}
	
	
	//跳转到增加付款页面
		@RequestMapping(value = "addpay")
		public String addpay(Outcontract outcontract,Model model,HttpServletResponse response,HttpServletRequest request) {
			System.out.println("进入了addpay方法");
			outcontract.setProjectName(projectService.get(outcontract.getProjectId()+"").getName());
		    model.addAttribute("outcontract", outcontract);
		    if("1".equals(outcontract.getSettlementWay())){
//		    	按订单结算
		    	OutcontractPay outcontractPay=new OutcontractPay();
		    	outcontractPay.setOutcontractId( Integer.parseInt(outcontract.getId()));
		    	Page<OutcontractPay> page = outcontractPayService.findPage(new Page<OutcontractPay>(request, response), outcontractPay); 
				for(int i=0;i<page.getList().size();i++){
					page.getList().get(i).setOrderName(outcontractService.get(""+page.getList().get(i).getOrderId()).getName());
					
				}
		    	
		    	model.addAttribute("page", page);
				Outcontract outcontract1=new Outcontract();
		    	outcontract1.setParent(outcontract);
		    	List list=outcontractService.findList(outcontract1);
		    	System.out.println("长度为"+list.size());
		    	model.addAttribute("list",list );
		    	return "modules/out/addpay";
		    }else if("2".equals(outcontract.getSettlementWay())){
//		    	按合同结算
		    	OutcontractPay outcontractPay=new OutcontractPay();
		    	outcontractPay.setOutcontractId( Integer.parseInt(outcontract.getId()));
		    	Page<OutcontractPay> page = outcontractPayService.findPage(new Page<OutcontractPay>(request, response), outcontractPay); 
				model.addAttribute("page", page);
		    	return "modules/out/addpay1";
		    }else
		    {
		    	OutcontractPay outcontractPay=new OutcontractPay();
		    	outcontractPay.setOutcontractId( Integer.parseInt(outcontract.getId()));
		    	Page<OutcontractPay> page = outcontractPayService.findPage(new Page<OutcontractPay>(request, response), outcontractPay); 
				for(int i=0;i<page.getList().size();i++){
					page.getList().get(i).setOrderName(outcontractService.get(""+page.getList().get(i).getOrderId()).getName());
					
				}
		    	
		    	model.addAttribute("page", page);
				Outcontract outcontract1=new Outcontract();
		    	outcontract1.setParent(outcontract);
		    	List list=outcontractService.findList(outcontract1);
		    	System.out.println("长度为"+list.size());
		    	model.addAttribute("list",list );
//				框架合同
				return "modules/out/addpay2";

		    }
		}
//保存补充合同
	@RequestMapping(value = "savecontract")
	public String savecontract(Outcontract outcontract, Model model, RedirectAttributes redirectAttributes) {
		System.out.println("进入了保存补充合同方法");
		System.out.println("他爸爸是"+outcontract.getParent().getId());
		 Outcontract parent=outcontractService.get(outcontract.getParent().getId()+"");
		System.out.println("他爸爸的结算方式是"+parent.getSettlementWay());
		Date d1=parent.getEndTime();
		Date d2=outcontract.getEndTime();
		System.out.println("之前结算时间"+parent.getEndTime());
		System.out.println("现在结算时间"+outcontract.getEndTime());
		outcontractService.save(outcontract);
 if(d1.getTime()<d2.getTime()){
	System.out.println("<");
	parent.setEndTime(d2);

	outcontractService.save(parent);
}

 
	Outcontract outcontract1=new Outcontract();
	outcontract1.setParent(outcontractService.get(outcontract.getParent().getId()+""));
	List list=outcontractService.findList(outcontract1);
	System.out.println("长度为"+list.size());
	model.addAttribute("list",list );
	
	model.addAttribute("father", outcontract);
	return "modules/out/add2";
 

	}
	
	@RequestMapping(value = {"list1"})
	public String list1(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Outcontract> list = outcontractService.findList(outcontract); 
		for(int i=0;i<list.size();i++){
			if(list.get(i).getProjectId()!=null&&list.get(i).getProjectId()!=0){
				list.get(i).setProjectName(projectService.get(list.get(i).getProjectId()+"").getName());
			}
			if(list.get(i).getOutsourcerId()!=null&&list.get(i).getOutsourcerId()!=0){
				list.get(i).setOutsourcerName(outsourcerService.get(list.get(i).getOutsourcerId()+"").getName());
			}
			if(list.get(i).getContractId()!=null&&list.get(i).getContractId()!=0){
				list.get(i).setContractName(contractService.get(list.get(i).getContractId()+"").getName());		
			}
			if(list.get(i).getOutcontractTypeId()!=null){
			if(list.get(i).getOutcontractTypeId()==1){
				list.get(i).setOutcontractTypeName("服务合同");
			}else if(list.get(i).getOutcontractTypeId()==2){
				list.get(i).setOutcontractTypeName("采购合同");
			}else{
				list.get(i).setOutcontractTypeName("分包合同");
			}
			
			}
		}
		model.addAttribute("list", list);
		return "modules/out/outcontractListAccessory";
	}
	
	@RequestMapping(value = {"list12"})
	public String list12(Outcontract outcontract, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Outcontract> list = outcontractService.findList(outcontract); 
		for(int i=0;i<list.size();i++){
			if(list.get(i).getProjectId()!=null&&list.get(i).getProjectId()!=0){
				list.get(i).setProjectName(projectService.get(list.get(i).getProjectId()+"").getName());
			}
			if(list.get(i).getOutsourcerId()!=null&&list.get(i).getOutsourcerId()!=0){
				list.get(i).setOutsourcerName(outsourcerService.get(list.get(i).getOutsourcerId()+"").getName());
			}
			if(list.get(i).getContractId()!=null&&list.get(i).getContractId()!=0){
				list.get(i).setContractName(contractService.get(list.get(i).getContractId()+"").getName());		
			}
			if(list.get(i).getOutcontractTypeId()!=null){
			if(list.get(i).getOutcontractTypeId()==1){
				list.get(i).setOutcontractTypeName("服务合同");
			}else if(list.get(i).getOutcontractTypeId()==2){
				list.get(i).setOutcontractTypeName("采购合同");
			}else{
				list.get(i).setOutcontractTypeName("分包合同");
			}
			
			}
		}
		model.addAttribute("list", list);
		return "modules/out/outcontractListAccessory1";
	}
	
	
	

	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Outcontract> list = outcontractService.findList(new Outcontract());
		for (int i=0; i<list.size(); i++){
			Outcontract e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
}